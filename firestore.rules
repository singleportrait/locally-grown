rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /{document=**} {
      allow read, write: if false;
    }
    match /users/{userId} {
      allow read, update, delete, create: if (request.auth != null && request.auth.uid == userId);
    }
    match /events/{eventId} {
      function userIsEventMod() {
        let adminIds = get(/databases/$(database)/documents/events/$(eventId)).data.adminIds;
        return (request.auth.uid in(adminIds));
      }

      function editOnlyChangesFields(allowedFields) {
        let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return affectedKeys.hasOnly(allowedFields);
      }

      function registrationIncrementsTotalRegistered() {
        let title = debug("** Check that registration increments total registered if non-mod is updating **");
        let debugNewCount = debug("** newCount: **");
        let newCount = debug(request.resource.data.totalRegistered);

        let debugOldCount = debug("** oldCount: **");
        let oldCount = debug(resource.data.totalRegistered);

        let debugIsAboveZero = debug("** newCount >= 0 ? **");
        let isAboveZero = debug(newCount >=0);

        return ((newCount > oldCount) || (newCount < oldCount)) && isAboveZero;
      }

      function newAllowedTotalIsGreaterOrEqualToCurrentTotalRegistered() {
        let result = debug("** newAllowedTotalIsGreaterOrEqualToCurrentTotalRegistered? **");
        return debug(request.resource.data.totalAllowed >= resource.data.totalRegistered);
      }

      function newTotalRegisteredIsLessOrEqualToTotalAllowed() {
        return request.resource.data.totalRegistered <= resource.data.totalAllowed;
      }

      allow read: if true;
      allow update: if ((userIsEventMod() ||
        (editOnlyChangesFields(["totalRegistered", "registrationUpdatedAt"]) && registrationIncrementsTotalRegistered()) && newTotalRegisteredIsLessOrEqualToTotalAllowed()) &&
        newAllowedTotalIsGreaterOrEqualToCurrentTotalRegistered());

      match /members/{userId} {
        function memberHasRegisteredAt() {
          return (request.resource.data.keys()
            .hasAll(["registeredAt"]));
        }

        function updatedRegistrationUpdatedAtTimestamp() {
          return getAfter(/databases/$(database)/documents/events/$(eventId))
           .data.registrationUpdatedAt == request.time;
        }

        allow read, update: if isAuthed(userId) || userIsEventMod();
        allow create: if (isAuthed(userId) || userIsEventMod()) &&
          memberHasRegisteredAt() &&
          updatedRegistrationUpdatedAtTimestamp();
        allow delete: if (isAuthed(userId) || userIsEventMod()) &&
          updatedRegistrationUpdatedAtTimestamp();
      }

      // Something like this; pseudocode at this point !
      match /registeredInfo/{document=**} {
        function isRegisteredMember() {
          return exists(/databases/$(database)/documents/events/$(eventId)/members/$(request.auth.uid));
        }

        allow read: if (isRegisteredMember() || userIsEventMod());
        allow update, create: if userIsEventMod();
      }
    }

    match /readonly/{docId} {
      allow read: if true;
      allow write: if false;
    }
    match /posts/{postId} {
      allow read: if (resource.data.visibility == "public") ||
        (resource.data.authorId == request.auth.uid);
      allow update: if (resource.data.authorId == request.auth.uid);
    }
  }
}
